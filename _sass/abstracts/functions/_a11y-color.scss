// Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
// Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef
@function luminance($color) {
  // White luminance is 1
  // Black luminance is 0
  // #c00 luminance is 0.1283736919
  $rgba: red($color), green($color), blue($color);
  $rgba2: ();
  @for $i from 1 through 3 {
    $rgb: nth($rgba, $i);
    $rgb: $rgb / 255;
    $rgb: if($rgb < .03928, $rgb / 12.92, pow(($rgb + .055) / 1.055, 2.4));
    $rgba2: append($rgba2, $rgb);
  }
  @return (0.2126 * nth($rgba2, 1)) + (0.7152 * nth($rgba2, 2)) + (0.0722 * nth($rgba2, 3));
}

// Evaluate the Color luminance to determine if it is light or dark
@function yiq($color) {
  $r: red($color);
  $g: green($color);
  $b: blue($color);
  $yiq: (($r*299) + ($g*587) + ($b*114))/1000;
  @return $yiq;
}

@function light-or-dark($color) {
  // If YIQ is more than 128, this is a light color
  @if yiq($color) > 128 {
    @return "light";
  } @else {
    @return "dark";
  }
}

// Calculate "readability" as defined by WCAG 2.1
@function color-contrast($fg, $bg) {
  // Adapted from: https://github.com/LeaVerou/contrast-ratio/blob/gh-pages/color.js
  // Formula: http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef
  $luminance1: luminance($fg) + 0.05;
  $luminance2: luminance($bg) + 0.05;
  $ratio: $luminance1 / $luminance2;
  @if $luminance2 > $luminance1 {
    $ratio: 1 / $ratio;
  }
  // Round to a hundreth because 6.96 should not pass a ratio of 7.0
  $ratio: round($ratio * 100) / 100;
  @return $ratio;
}

@function validate-font-size($size) {
  // Check if any unit other than px
  // Return only pixel value with no unit
}

@function get-ratio($level: 'AA', $size: 16, $bold: false) {
  // Default ratio
  $ratio: 4.5;
  
  @if $level == 'AAA' {
    $ratio: 7;
  }
  
  // Check font size
  @if $size < 24 {
    // Small text, use defaults
    // But:
    @if $size >= 19 and $bold == true {
      // Special case: Small text but also bold
      @if $level == 'AAA' {
        $ratio: 4.5;
      } @else {
        $ratio: 3;
      }
    }
  } @else {
    // Larger than 24
    $ratio: 3;
    @if $level == 'AAA' {
      $ratio: 4.5;
    }
  }
  @return $ratio;
}

// Retrieve values from a cache file if it exists
@function return-from-a11y-cache($fg, $bg) {
  @if map-exists($a11y-cache) {
    // Now loop through the cache file
    @each $cachefg, $cachebg, $cacheresult in $a11y-cache {
      // Check in both directions
      @if 
        $cachefg == $fg and $cachebg == $bg or 
        $cachefg == $bg and $cachebg == $fg {
        @return $cacheresult;
      }
    }
    @return null;
  }
  @return null;
}


@function a11y-color($fg, $bg, $level: 'AA', $size: 16, $bold: false) {
  // Goal: Return a color that passes for the chosen accessibility level
  // without changing the Hue of the color at all
  $font-size: strip-unit($size);
  $ratio: get-ratio($level, $font-size, $bold);
  
  // If we pass ratio already, return the original color
  @if color-contrast($fg, $bg) >= $ratio {
    @return $fg;
  } @else {
    // Not passing, time to get to work
    
    // Check the cache file for a value
    $cachedresult: return-from-a11y-cache($fg, $bg);
    @if $cachedresult {
      @return $cachedresult;
    
    } @else {
      // Do the work of calculating a passing color:
      
      // Should the color be lightened or darkened?
      // Higher percentage steps means faster compile time, but we might overstep the required threshold
      $step: 1%;
      $light-step: $step;
      // In addition to increasing/decreasing lightness, move the needle on saturation as well
      $sat-step: 1%;
      $fg-yiq: light-or-dark($fg);
      $bg-yiq: light-or-dark($bg);
      @if $fg-yiq == light and $bg-yiq == light {
        // Both are light colors, darken the fg
        $light-step: - $step;
      } @else if $fg-yiq == dark and $bg-yiq == light {
        // bg is light, fg is dark but does not pass, darken more
        $light-step: - $step;
      }
      // Keeping the rest of the logic here, but since our default values do not change, these are not needed
      //@else if $fg-yiq == light and $bg-yiq == dark {
      //  // bg is dark, fg is light but does not pass, lighten further
      //  $light-step: $step;
      //} @else if $fg-yiq == dark and $bg-yiq == dark {
      //  // both are dark, so lighten the fg
      //  $light-step: $step;
      //}
      
      // @while continues to evaluate until the expression is FALSE
      @while color-contrast($fg, $bg) < $ratio {
        $fg: scale-color($fg, $lightness: $light-step, $saturation: $sat-step);
      }
      @return $fg;
    }
  }
}
